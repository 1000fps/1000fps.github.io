I"~<p>At√© agora, em nossos programas s√≥ conseguimos salvar uma √∫nica informa√ß√£o em uma vari√°vel, e isso j√° resolve muitos dos desafios que encontramos.</p>

<p>Contudo temos ainda diversos problemas que para ser resolvidos √© mais interessante que seja poss√≠vel guardar v√°rias informa√ß√µes na mesma refer√™ncia (vari√°vel)</p>

<p>Para isso utilizamos as listas (lists), que √© uma estrutura de dados que podemos guardar mais de um dado em uma vari√°vel s√≥.</p>

<hr />

<h2 id="criando-listas">Criando listas</h2>

<p>Veja s√≥ como criar uma lista em python:</p>

<p>```{.python .numberLines}
minhaLista = [‚Äúa‚Äù, ‚Äúb‚Äù, ‚Äúc‚Äù]
print(minhaLista)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

&gt; Tente executar o c√≥digo acima, o que acontece?


Perceba, que cada um dos elementos da lista √© separado por uma virgula.

---

## Acessando elementos

Podemos acessar esses elementos individualmente utilizando o √≠ndice (ou index em ingl√™s) desse elemento. Para isso abrimos colchete ( [ ) colocamos o n√∫mero do √≠ndice que queremos e fechamos colchete ( ] ). Veja: 



```{.python .numberLines}
print(minhaLista[1])
</code></pre></div></div>

<blockquote>
  <p>Adicione o c√≥digo acime ao final da execu√ß√£o do c√≥digo anterior. Aconteceu o que voc√™ havia previsto? Ou aconteceu alguma coisa diferente?</p>
</blockquote>

<p>Os √çndices em programa√ß√£o podem ser confusos a primeira vista, mas com experi√™ncia vamos acostumando, no caso do script acima, estamos tentando acessar o <strong>elemento de √≠ndice 1</strong> de nossa lista, que na realidade √© o segundo elemento.</p>

<p>Isso ocorre por que os √≠ndices come√ßam no n√∫mero 0.</p>

<p>Ent√£o no exemplo de minhaLista o <strong>elemento de √≠ndice 0</strong> √© o caractere <strong>a</strong>, o <strong>elemento de √≠ndice 1</strong> √© o caractere <strong>b</strong>, e assim por diante.</p>

<h2 id="modificando-elementos">Modificando elementos</h2>

<p>Para modificar elementos de uma lista, podemos acess√°-lo como acabamos de ver, e atribuir simplesmente atribuir um novo valor a ele.</p>

<p>```{.python .numberLines}
minhaLista[1] = ‚Äúd‚Äù
print(minhaLista)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

---

## Adicionando novos elementos

Uma das facilidades das listas de python √© poder anexar novos elementos ao final da lista, para isso utilizamos a fun√ß√£o append de listas


```{.python .numberLines}
minhaLista.append("e")
print(minhaLista)
</code></pre></div></div>

<hr />

<h2 id="modificando-elementos-1">Modificando elementos</h2>

<p>Para modificar elementos de uma lista, podemos acess√°-lo como acabamos de ver, e atribuir simplesmente atribuir um novo valor a ele.</p>

<p>```{.python .numberLines}
minhaLista[1] = ‚Äúd‚Äù
print(minhaLista)</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
---


---

# C√≥digo completo 

```{.python .numberLines}
minhaLista = ["a", "b", "c"]

print(minhaLista)

print(minhaLista[1])

minhaLista[1] = "d"

print(minhaLista)

minhaLista.append("e")

print(minhaLista)
</code></pre></div></div>

<hr />

<hr />

<h1 id="desafio">Desafio!</h1>

<p>Utilizando tudo que voc√™ aprendeu at√© agora, voc√™ consegue criar um script que
percorra uma lista qualquer?</p>

<h1 id="exerc√≠cios">Exerc√≠cios.</h1>

<ol>
  <li>Crie um script que mostre o maior n√∫mero de uma lista.</li>
  <li>Crie um script que fa√ßa a soma de todos os n√∫meros de uma lista.</li>
  <li>Crie um script que compare duas listas, e fale se elas s√£o id√™nticas ou
n√£o.</li>
  <li>Crie um script que conte mostre para o usu√°rio os elementos que s√£o iguais
entre duas listas.</li>
  <li>Crie um programa de cadastro de nomes, o programa dever√° continuar
cadastrando nomes at√© o usu√°rio confirmar que n√£o quer mais cadastrar nomes.
Depois disso o programa dever√° mostrar todos os nomes cadastrados, um por
linha.</li>
</ol>

:ET